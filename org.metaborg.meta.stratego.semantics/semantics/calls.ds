module calls

imports
  base
  stratego-signatures
  shared
  build
  definitions
  
rules // calls

  D defs |- (CallT(SVar(sname), ass, ats), E env) --> (v, E env')
  where
    defs[sname] => SDefT(sname', fss, fts, s),
    sname == sname', // sanity check
    bindSVars(ass, fss) -bind-> defs',
    bl(ats) -blds-> ats', // evaluate term argument expressions
    typedIds(fts) -exid-> fts',
    D {defs', defs} |- (s, E {fts' |*-> ats', env}) --> (v, E env')
  
  SVar(sname) --> v
  where
    CallT(SVar(sname), [], []) --> v

signature
  internal-sorts
    NameExtractor
  
  internal-constructors
    typedIds: List(Typedid) -> NameExtractor
  
  arrows
    NameExtractor -exid-> List(String)
  
rules
  
  typedIds([]) -exid-> []
 
  typedIds([VarDec(x, dc) | xs]) -exid-> [ x | xs' ]
  where
    typedIds(xs) -exid-> xs'

signature
  internal-sorts
    SBinder
    
  internal-constructors
    bindSVars: List(Strategy) * List(Typedid) -> SBinder
  
  arrows
    SBinder -bind-> D

rules

  bindSVars([], []) -bind-> {}
  
  bindSVars([s | ss], [VarDec(x, dc) | tids]) -bind-> { x |--> SDefT(x, [], [], s), binds }
  where
    bindSVars(ss, tids) -bind-> binds
    
// rules // let - in - end
// 
//   Let([], s) --> v
//   where
//     s --> v
//   
//   D defs |- Let([SDefT(sname, ss, ts, s1) | sdefs], s2) --> v
//   where
//     D { sname |--> SDefT(sname, ss, ts, s1), defs } |- Let(sdefs, s2) --> v
// 
// signature
//   internal-constructors
//     primitive : String * List(Strategy) * TLIST -> Term
// 
// rules // primitives
// 
//   PrimT(name, asargs, atargs) --> v
//   where
//     bl(atargs) --> S(ats),
//     isATermList(ats) => True(),
//     asATermList(ats) => ats',
//     primitive(name, asargs, ats') --> v // implement in Java
//   
// rules // dynamic call
//   
//   CallDynamic(t, sts, tts) --> v
//   where
//     Build(t) --> S(asname),
//     isATermString(asname) => True(),
//     asATermString(asname) => asname',
//     stringValue[asname']() => sname,
//     CallT(SVar(sname), sts, tts) --> v
//       