module calls

imports
  base
  stratego-signatures
  shared
  build
  definitions
  aterm
  
rules // calls

  D defs |- (CallT(SVar(sname), ass, ats), E env) --> (v, E env'')
  where
    defs[sname] => SDefT(sname', fss, fts, s),
    sname == sname', // sanity check
    bindSVars(ass, fss) -bind-> defs',
    bl(ats) -blds-> ats', // evaluate term argument expressions
    typedIds(fts) -exid-> fts',
    E env |- binder(fts', ats') -binder-> env',
    D {defs', defs} |- (s, E env') --> (v, E env'')
  
  SVar(sname) --> v
  where
    CallT(SVar(sname), [], []) --> v

signature
  sorts
    NameExtractor
    MultiExtender

  internal-constructors
    typedIds: List(Typedid) -> NameExtractor
    binder: List(String) * List(T) -> MultiExtender   
  
  arrows
    NameExtractor -exid-> List(String)
    MultiExtender   -binder-> E

rules

  E e |- binder([], []) -binder-> e
  
  E e |- binder([k | kxs], [v | vxs]) -binder-> e'
  where
    E {k |--> v, e} |- binder(kxs, vxs) -binder-> e'

rules
  
  typedIds([]) -exid-> asNILofString([])
 
  typedIds([VarDec(x, dc) | xs]) -exid-> [ x | xs' ]
  where
    typedIds(xs) -exid-> xs'

signature
  sorts
    SBinder
    
  internal-constructors
    bindSVars: List(Strategy) * List(Typedid) -> SBinder
  
  arrows
    SBinder -bind-> D

rules

  bindSVars([], []) -bind-> asD({})
  
  bindSVars([s | ss], [VarDec(x, dc) | tids]) -bind-> { x |--> SDefT(x, [], [], s), binds }
  where
    bindSVars(ss, tids) -bind-> binds


signature
  native-operators
    primCall : String * List(Strategy) * List(T) -> Value

rules // primitives

  PrimT(name, ass, ats) --> v
  where
    bl(ats) -blds-> ats_aterms,
    primCall(name, ass, ats_aterms) => v // implement in Java
  
rules // dynamic call
  
  CallDynamic(target, ass, ats) --> v
  where
    Build(target) --> S(sname_aterm),
    isATermString(sname_aterm) == true,
    asATermString(sname_aterm) => sname_aterm_str,
    stringValue[sname_aterm_str]() => sname,
    CallT(SVar(sname), ass, ats) --> v
