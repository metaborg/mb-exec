module build

imports
  base
  stratego-signatures
  shared
  aterm
  util

signature
  internal-sorts
    Builder
    
  internal-constructors
    b : PreTerm -> Builder
    bl : List(STerm) -> Builder

  arrows
    Builder -bld-> T

rules // build

  TF tf |- Build(Anno(t, as)) --> S(aterm)
  where
    b(t) -bld-> at,
    b(as) -bld-> aas,
    isATermList(aas) == true,
    asATermList(aas) => aas',
    annotateTerm[tf](at, aas') => aterm
  
  Build(Var(x)) --> v
  where
    b(Var(x)) -bld-> t,
    S(t) => v

rules // actual term building

  E env |- b(Var(x)) -bld-> t
  where
    E env |- lookup(x) -look-> v,
    v => S(t) // the lookup has to be successful
      
  TF tf |- b(Int(i)) -bld-> aint
  where
    makeInt[tf](i) => aint
  
  TF tf |- b(Str(s)) -bld-> astr
  where
    makeString[tf](s) => astr
   
  TF tf |- b(Op(c, ts)) -bld-> aappl
  where
    length(ts) => tslen,
    makeConstructor[tf](c, tslen) => constr,
    bl(ts) -bld-> ats,
    isATermList(ats) == true,
    asATermList(ats) => ats',
    toNativeList(ats') => ts',
    makeAppl(tf, constr, ts') => aappl
    
  TF tf |- b(Explode(ct, ts)) -bld-> t
  where
    Build(ct) --> S(ac), // constructor name
    isATermString(ac) == true,
    asATermString(ac) => atermstr,
    stringValue[atermstr]() => c,  
    Build(ts) => S(ats), // subterms
    isATermList(ats) == true,
    asATermList(ats) => ats',
    size[ats']() => tslen,
    makeConstructor[tf](c, tslen) => constr,
    toNativeList(ats') => ts',
    makeAppl(tf, constr, ts') => t
    
  TF tf |- bl([]) -bld-> anil
  where
    makeList(tf, []) => anil
  
  TF tf |- bl([t | ts]) -bld-> alist
  where
    Build(t) --> S(at),
    bl(ts) -bld-> ats,
    isATermList(ats) == true,
    asATermList(ats) => ats',
    makeListCons[tf](at, ats') => alist
