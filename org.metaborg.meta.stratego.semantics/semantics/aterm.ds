module aterm

signature
    
  native-datatypes
  
   "org.spoofax.interpreter.terms.IStrategoTerm" as T {
      getSubtermCount : Int
      getSubterm : Int -> T
      getAllSubterms : TARRAY
      getAnnotations : TLIST
      toString : String
    }
    
    "org.spoofax.interpreter.terms.IStrategoString" as TSTR -> T {
      stringValue : String
    }
    
    "org.spoofax.interpreter.terms.IStrategoInt" as TINT -> T {
      intValue : Int
    }
    
    "org.spoofax.interpreter.terms.IStrategoReal" as TREAL -> T {
      realValue : Real
    }
    
    "org.spoofax.interpreter.terms.IStrategoAppl" as TAPPL -> T {
      getConstructor : TCONSTR
    }
    
    "org.spoofax.interpreter.terms.IStrategoConstructor" as TCONSTR-> T {
      getName : String
      arity   : Int
    }
    
    "org.spoofax.interpreter.terms.IStrategoTuple" as TTUP -> T {
    	
    }
    
    "org.spoofax.interpreter.terms.IStrategoList" as TLIST -> T {
      head   : T
      tail   : TLIST
      isEmpty: Bool
      size   : Int
    }
    
    "org.spoofax.interpreter.terms.ITermFactory" as TF {
      makeString : String -> TSTR
      makeInt : Int -> TINT
      makeReal : Real -> TREAL
      makeTuple : TARRAY -> TTUP
            
    	makeConstructor : String * Int -> TCONSTR
    	makeAppl : TCONSTR * TARRAY -> TAPPL
    	
    	makeList : TARRAY -> TLIST
    	makeListCons : T * TLIST -> TLIST
    	
    	annotateTerm : T * TLIST -> T
    }
    
    "org.spoofax.interpreter.terms.IStrategoTerm[]" as TARRAY {
      
    }
    
    "ds.manual.interpreter.AutoInterpInteropContext" as IC {
      
    }
  
  native-operators
    // TARRAY2List: TARRAY -> List(T)
    List2TARRAY: List(T) -> TARRAY
    makeNil : TF -> TLIST 
    
  native-operators
  
    isATermString : T -> Bool
    isATermInt    : T -> Bool
    isATermReal    : T -> Bool
    isATermAppl   : T -> Bool
    isATermTuple  : T -> Bool
    isATermList   : T -> Bool
    
    asATermString : T -> TSTR
    asATermInt    : T -> TINT
    asATermReal   : T -> TREAL
    asATermAppl   : T -> TAPPL
    asATermTuple  : T -> TTUP
    asATermList   : T -> TLIST
    
    
    
