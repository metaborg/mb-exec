module definitions

imports
  semantics/shared
  semantics/stratego-signatures
  semantics/state

signature
  sorts
    LetHelper

  constructors
    letEval : List(Def) * Strategy -> LetHelper

  arrows
    LetHelper -leteval-> Value

rules // let - in - end

  Let(sdefs, s) --> v
  where
    sdefNames(sdefs) --> snames;
    SParAlloc(snames) -salloc-> _;
    letEval(sdefs, s) -leteval-> v.
  
  letEval([], in_s) -leteval-> v
  where
    in_s --> v.
  
  letEval([sdef@SDefT(sname, _, _, _) | sdefs], in_s) -leteval-> v
  where
    sdef -mkthunk-> thunk;
    SUpdate(sname, thunk) -salloc-> _;
    letEval(sdefs, in_s) -leteval-> v.
    
signature
  sorts
    Allocator
    AllocatorResult
    
  constructors
    allocDefs : List(Def) -> Allocator
    allocdDefs : List(Def) -> AllocatorResult 
    storeDefs : List(Def) -> Allocator

  arrows
    Module -allocmodule-> Unit
    Allocator -allocsdefs-> AllocatorResult
    Allocator -storesdefs-> Unit
    Def -mkthunk-> Thunk
    
rules // strategy definitions
  
  Specification([_, Strategies(ss)]) -allocmodule-> U()
  where
    allocDefs(ss) -allocsdefs-> allocdDefs(ss');
    storeDefs(ss') -storesdefs-> _.
  
  allocDefs([]) -allocsdefs-> allocdDefs([]).
  
  allocDefs([AnnoDef(_, sdef') | sdefs]) -allocsdefs-> ad
  where
    allocDefs([sdef' | sdefs]) -allocsdefs-> ad.
  
  allocDefs([ExtSDef(sname, _, _) | sdefs]) -allocsdefs-> ad
  where
    SSoftAlloc(sname) -salloc-> _;
    allocDefs(sdefs) -allocsdefs-> ad.
  
  allocDefs([sdef@SDefT(sname, _, _, _) | sdefs]) -allocsdefs-> allocdDefs([sdef | sdefs'])
  where
    SAlloc(sname) -salloc-> _;
    allocDefs(sdefs) -allocsdefs-> allocdDefs(sdefs').
  
  storeDefs([]) -storesdefs-> U().
  
  storeDefs([sdef@SDefT(sname, _, _, _) | sdefs]) -storesdefs-> U()
  where
    sdef -mkthunk-> thunk;
    SUpdate(sname, thunk) -salloc-> _;
    storeDefs(sdefs) -storesdefs-> _.
  
  venv, senv |- SDefT(sname, ss, ts, s) -mkthunk-> Thunk(sname, typedIds(ss), typedIds(ts), s, venv, senv).
  
signature
  constructors
    typedIds: List(Typedid) --> List(String)
    sdefNames: List(Def) --> List(String)
    
rules // typedid name extractor

  typedIds([]) --> [].
 
  typedIds([VarDec(x, _) | xs]) --> [ x | typedIds(xs) ].

rules // SDefT name extractor

  sdefNames([]) --> [].
  
  sdefNames([SDefT(sname, _, _, _) | sdefs]) --> [sname | sdefNames(sdefs)].


