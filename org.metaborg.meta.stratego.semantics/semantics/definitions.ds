module definitions

imports
  base
  shared
  stratego-signatures
  state

signature
  internal-sorts
    Thunk

  semantic-components
    D -> Map<String, Thunk>

  internal-constructors
    Thunk : String * List(String) * List(String) * Strategy * Int -> Thunk

rules // let - in - end

  Int e |- Let([], s) --> v
  where
    s --> v
  
  Int e, D defs |- Let([sdef | sdefs], in_s) --> v
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    D { sname |--> Thunk(sname, ss', ts', s, e), defs } |- Let(sdefs, in_s) --> v

signature
  internal-sorts
    Deffer

  internal-constructors
    topdefs : Module -> Deffer
    defs : List(Def) -> Deffer

  arrows
    Deffer -sdefs-> D

  native-operators
    asD : Map<Term, Term> -> D

rules // strategy definitions
  
  topdefs(Specification([sigs, Strategies(ss)])) -sdefs-> v
  where
    defs(ss) -sdefs-> v

  D defs |- defs([]) -sdefs-> defs

  D defs |- defs([sdef | ds]) -sdefs-> defs'
  where
    sdef => AnnoDef(annos, sdef'),
    D defs |- defs([sdef' | ds]) -sdefs-> defs'

  D defs |- defs([sdef | ds]) -sdefs-> { sname |--> Thunk(sname, ss', ts', s, 0), defs' }
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    D defs |- defs(ds) -sdefs-> defs'

  D defs |- defs([sdef | ds]) -sdefs-> defs'
  where
    sdef => ExtSDef(a, b, c),
    D defs |- defs(ds) -sdefs-> defs'

signature
  internal-sorts
    NameExtractor

  arrows
    NameExtractor -exid-> List(String)
    
  internal-constructors
    typedIds: List(Typedid) -> NameExtractor

rules // typedid unpacker

  typedIds([]) -exid-> asNILofString([])
 
  typedIds([VarDec(x, dc) | xs]) -exid-> [ x | xs' ]
  where
    typedIds(xs) -exid-> xs'

rules // TODO store constructor declarations




