module definitions

imports
  base
  shared
  stratego-signatures

signature
  semantic-components
    D -> Map<String, StrategyDef>

rules // let - in - end

  Let([], s) --> v
  where
    s --> v
  
  D defs |- Let([SDefT(sname, ss, ts, s) | sdefs], in_s) --> v
  where
    D { sname |--> SDefT(sname, ss, ts, s), defs } |- Let(sdefs, in_s) --> v

signature
  sorts
    Deffer

  internal-constructors
    topdefs : Module -> Deffer
    defs : List(Def) -> Deffer

  arrows
    Deffer -sdefs-> D
  native-operators
    asD : Map<Term, Term> -> D

rules // strategy definitions
  
  topdefs(Specification([sigs, Strategies(ss)])) -sdefs-> v
  where
    defs(ss) -sdefs-> v

  defs([]) -sdefs-> asD({})

  defs([sdef | ds]) -sdefs-> { sname |--> SDefT(sname, ss, ts, s), defs}
  where
    sdef => SDefT(sname, ss, ts, s),
    defs(ds) -sdefs-> defs

  defs([sdef | ds]) -sdefs-> defs
  where
    sdef => ExtSDef(a, b, c),
    defs(ds) -sdefs-> defs
  
rules // TODO store constructor declarations




