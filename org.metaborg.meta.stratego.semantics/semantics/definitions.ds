module definitions

imports
  base
  shared
  stratego-signatures
  state

rules // let - in - end

  VEnv e, SEnv d |- Let([], s) --> v
  where
    VEnv e, SEnv d |- s --> v
  
  VEnv e, SEnv d |- Let([sdef | sdefs], in_s) --> v
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    SAlloc(d, sname) -salloc-> d',
    SUpdate(d', sname, Thunk(sname, ss', ts', s, e, d')) -salloc-> d'',
    VEnv e, SEnv d'' |- Let(sdefs, in_s) --> v

signature
  internal-sorts
    Deffer

  internal-constructors
    topdefs : Module -> Deffer
    defs : List(Def) -> Deffer

  arrows
    Deffer -sdefs-> SEnv

rules // strategy definitions
  
  // unpack specification
  VEnv e, SEnv d |- topdefs(Specification([sigs, Strategies(ss)])) -sdefs-> d'
  where
    VEnv e, SEnv d |- defs(ss) -sdefs-> d'
  
  // bottom
  VEnv e, SEnv d |- defs([]) -sdefs-> d

  // store a definition as a thunk
  VEnv e, SEnv d |- defs([sdef | ds]) -sdefs-> d''
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    SPushBack(d, sname, Thunk(sname, ss', ts', s, e, d)) -salloc-> d',
    SEnv d' |- defs(ds) -sdefs-> d''

  // unpack annotated definition
  VEnv e, SEnv d |- defs([sdef | ds]) -sdefs-> d'
  where
    sdef => AnnoDef(annos, sdef'),
    VEnv e, SEnv d |- defs([sdef' | ds]) -sdefs-> d'

  // skip declarations of external
  VEnv e, SEnv d |- defs([sdef | ds]) -sdefs-> d'
  where
    sdef => ExtSDef(a, b, c),
    VEnv e, SEnv d |- defs(ds) -sdefs-> d'

signature
  internal-sorts
    NameExtractor

  arrows
    NameExtractor -exid-> List(String)
    
  internal-constructors
    typedIds: List(Typedid) -> NameExtractor

rules // typedid unpacker

  typedIds([]) -exid-> asNILofString([])
 
  typedIds([VarDec(x, dc) | xs]) -exid-> [ x | xs' ]
  where
    typedIds(xs) -exid-> xs'

rules // TODO store constructor declarations




