module definitions

imports
  base
  shared
  stratego-signatures
  state

signature
  internal-sorts
    LetHelper

  internal-constructors
    letEval : List(Def) * Strategy -> LetHelper

  arrows
    LetHelper -leteval-> Value

rules // let - in - end

  SEnv d |- Let(sdefs, s) --> v
  where
    sdefNames(sdefs) -exid-> snames,
    SParAlloc(d, snames) -salloc-> d',
    SEnv d' |- letEval(sdefs, s) -leteval-> v
  
  VEnv e, SEnv d |- letEval([], in_s) -leteval-> v
  where
    VEnv e, SEnv d |- in_s --> v
  
  VEnv e, SEnv d |- letEval([sdef | sdefs], in_s) -leteval-> v
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    SUpdate(d, sname, Thunk(sname, ss', ts', s, e, d)) -salloc-> d',
    VEnv e, SEnv d |- letEval(sdefs, in_s) -leteval-> v
    
signature
  internal-sorts
    Allocator
    AllocatorResult
    
  internal-constructors
    allocModule : Module -> Allocator
    allocDefs : List(Def) * SEnv -> Allocator
    allocdDefs : List(Def) * SEnv -> AllocatorResult 
    storeDefs : List(Def) -> Allocator

  arrows
    Allocator -allocmodule-> SEnv
    Allocator -allocsdefs-> AllocatorResult
    Allocator -storesdefs-> Bool

rules // strategy definitions
  
  VEnv e, SEnv d |- allocModule(Specification([sigs, Strategies(ss)])) -allocmodule-> d'
  where
    allocDefs(ss, d) -allocsdefs-> allocdDefs(ss', d'),
    VEnv e, SEnv d' |- storeDefs(ss') -storesdefs-> b
  
  allocDefs([], senv) -allocsdefs-> allocdDefs([], senv)
  
  allocDefs([sdef | sdefs], senv) -allocsdefs-> ad
  where
    sdef => AnnoDef(annos, sdef'),
    allocDefs([sdef' | sdefs], senv) -allocsdefs-> ad
  
  allocDefs([sdef | sdefs], senv) -allocsdefs-> ad
  where
    sdef => ExtSDef(a, b, c),
    allocDefs(sdefs, senv) -allocsdefs-> ad
  
  allocDefs([sdef | sdefs], senv) -allocsdefs-> allocdDefs([sdef | sdefs'], senv'')
  where
    sdef => SDefT(sname, ss, ts, s),
    SAlloc(senv, sname) -salloc-> senv',
    allocDefs(sdefs, senv') -allocsdefs-> allocdDefs(sdefs', senv'')
  
  VEnv e, SEnv d |- storeDefs([]) -storesdefs-> v
  where
    true => v
  
  VEnv e, SEnv d |- storeDefs([sdef | sdefs]) -storesdefs-> b
  where
    sdef => SDefT(sname, ss, ts, s),
    typedIds(ss) -exid-> ss',
    typedIds(ts) -exid-> ts',
    SUpdate(d, sname, Thunk(sname, ss', ts', s, e, d)) -salloc-> d',
    VEnv e, SEnv d |- storeDefs(sdefs) -storesdefs-> b
  
signature
  internal-sorts
    NameExtractor

  arrows
    NameExtractor -exid-> List(String)
    
  internal-constructors
    typedIds: List(Typedid) -> NameExtractor
    sdefNames: List(Def) -> NameExtractor
    
rules // typedid name extractor

  typedIds([]) -exid-> asNILofString([])
 
  typedIds([VarDec(x, dc) | xs]) -exid-> [ x | xs' ]
  where
    typedIds(xs) -exid-> xs'

rules // SDefT name extractor

  sdefNames([]) -exid-> asNILofString([])
  
  sdefNames([SDefT(sname, ss, ts, s) | sdefs]) -exid-> [sname | snames]
  where
    sdefNames(sdefs) -exid-> snames

rules // TODO store constructor declarations




