module spoofax/interpreter/pack
imports
  libstratego-lib
  libstrc
  libstratego-sglr

signature
  constructors
    InternalLib : String -> InternalLib

strategies

  spx-pack-stratego(frontend | includePath) =
      spx-resolve-path(|includePath) 
    ; spx-pack-stratego(frontend | includePath, [])

  spx-pack-stratego(frontend | includePath : List(String), seen : List(String)) :
    fileName -> spec
  where
     <string-ends-with(|".str")> fileName
  where
      ast := <spx-parse-stratego-file(|"Module", fileName)> fileName
    ; ast' := <frontend> ast
    ; file* := <collect(\ Import(x) -> x \)> ast'
    ; resFile* := <map(spx-resolve-path(|includePath))>
    ; seen' := [ fileName | seen] 
    ; seen'' := <union> (resFile*, seen')
    ; imp* := <diff> (resFile*, seen') 
    ; ast* := <map(spx-pack-stratego(frontend | includePath, seen''))> imp*
    ; spec := <foldl(spx-merge-specs)> (ast*, <spx-module-to-spec> ast')

  spx-pack-stratego(frontend | includePath : List(String), seen : List(String)) :
    fileName -> spec
  where
     <string-ends-with(|".ctree")> fileName
  where
     spec := <ReadFromFile> fileName

  spx-pack-stratego(frontend | includePath : List(String), seen : List(String)) :
    InternalLib(x) -> Specification([])

  spx-parse-stratego-file(|sort, path) =
      where(tbl := <spx-load-stratego-parsetable> sort)
    ; parse-file(debug(!"file-open-error"), strsglr-report-parse-error | tbl, sort, path)

  spx-resolve-path(|includePath) :
    moduleName -> resolvedName
  where
      resolvedName := <spx-resolve-path-with-fallback(|includePath)>
   <+ err(|["Could not resolve import ", moduleName])
    ; fail

  spx-resolve-path-with-fallback(|includePath):
    moduleName -> resolvedName
  where
      res* := <filter(\ x -> rn where rn := <spx-resolve-one-path(|x)> moduleName \)> includePath
    ; resolvedName := <Hd> res*

  spx-resolve-path-with-fallback(|includePath): x@"libstratego-lib" -> InternalLib(x)
  spx-resolve-path-with-fallback(|includePath): x@"libstratego-sglr" -> InternalLib(x)
  spx-resolve-path-with-fallback(|includePath): x@"libstratego-gpp" -> InternalLib(x)
  spx-resolve-path-with-fallback(|includePath): x@"libstratego-aterm" -> InternalLib(x)
  spx-resolve-path-with-fallback(|includePath): x@"libstratego-sdf" -> InternalLib(x)
  spx-resolve-path-with-fallback(|includePath): x@"libstrc" -> InternalLib(x)

  spx-resolve-one-path(|prefixPath) :
    moduleName -> fileName
  where
      fileName := <concat-strings> [prefixPath, "/", moduleName, ".ctree"]
    ; file-exists

  spx-resolve-one-path(|prefixPath) :
    moduleName -> fileName
  where
      fileName := <concat-strings> [prefixPath, "/", moduleName, ".str"]
    ; file-exists

  spx-module-to-spec: 
    Module(m, sec1*) -> Specification(sec*)
  where
    let fc(s) = filter(s) ; concat
    in
        str  := Strategies(<fc(\ Strategies(x) -> x \)> sec1*)
      ; rls  := Rules(<fc(\ Rules(x) -> x \)> sec1*)
      ; ovl  := Overlays(<fc(\ Overlays(x) -> x \)> sec1*)
      ; sig  := Signature(<fc(\ Signature(x) -> x \)> sec1*)
      ; sec* := [sig, str, rls, ovl]
    end

  spx-merge-specs :
    (Specification(sec1*), Specification(sec2*)) -> Specification(sec*)
  where
    let fc(s) = filter(s) ; concat
    in
        str  := Strategies(<conc> (<fc(\ Strategies(x) -> x \)> sec1*, <fc(\ Strategies(x) -> x \)> sec2*))
      ; rls  := Rules(<conc> (<fc(\ Rules(x) -> x \)> sec1*, <fc(\ Rules(x) -> x \)> sec2*))
      ; ovl  := Overlays(<conc> (<fc(\ Overlays(x) -> x \)> sec1*, <fc(\ Overlays(x) -> x \)> sec2*))
      ; sig  := Signature(<conc> (<fc(\ Signature(x) -> x \)> sec1*, <fc(\ Signature(x) -> x \)> sec2*))
      ; sec* := [sig, str, rls, ovl]
    end

  spx-load-stratego-parsetable =
       <spx-memo-open-parsetable(import-term(share/Stratego-Sugar.tbl))> "Stratego-Sugar.tbl"
    <+ err(|"Fatal internal error loading share/Stratego-Sugar.tbl")

  spx-memo-open-parsetable(gettbl) =
    spx-MemoParseTable
    <+ ?key
       ; gettbl
       ; tbl := <open-parse-table>
       ; rules(spx-MemoParseTable : key -> tbl)
