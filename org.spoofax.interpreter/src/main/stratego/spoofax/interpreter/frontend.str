/*
 * Copyright (c) 2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
 *
 * Licensed under the GNU Lesser General Public License, v2.1
 */
module spoofax/interpreter/frontend
imports
    libstratego-lib
    libstrc

strategies

    fake-main = spx-shell-frontend

    spx-shell-frontend :
        x -> x'
    with
        x' := <spx-shell-is-strategy < spx-shell-frontend-for-def + spx-shell-frontend-for-expr> x

    spx-shell-is-strategy : x@SDefT(_, _, _, _) -> x
    spx-shell-is-strategy : x@SDef(_, _, _) -> x
    spx-shell-is-strategy : x@SDefNoArgs(_, _) -> x
    spx-shell-is-strategy : x@RDefT(_, _, _, _) -> x
    spx-shell-is-strategy : x@RDef(_, _, _) -> x
    spx-shell-is-strategy : x@RDefNoArgs(_, _) -> x

    spx-shell-frontend-for-expr = 
        pre-desugar
      ; desugar-list-matching
      ; desugar
      ; raise-annotations
      ; simplify
      ; spx-shell-fixup-rename-calls

    spx-shell-frontend-for-def =
        stratego-desugar
      ; raise-annotations
      ; desugar-list-matching
      ; rules-to-sdefs-def 
      ; desugar-DefaultVarDec
      ; strename
      ; desugar-def
      ; rename-sdef
      ; spx-shell-fixup-rename-calls

    spx-shell-RenameVar:
      (varName, (n, m)) -> varName'
    where
      varName' := <concat-strings> [<cify> varName, "_", <int-to-string> n, "_", <int-to-string> m]

    spx-shell-HoArg = fail

    spx-shell-ends-with-arity =
        ?x
      ; trim-chars(is-num)
      ; where(<not(eq)> (x, <id>))
      ; string-ends-with(|"_")

    spx-shell-RenameCall :
    CallT(SVar(x), ss, ts) -> CallT(SVar(y), ss, ts)
    where 
      <not(spx-shell-ends-with-arity)> x
    with 
        <length> ss => n
      ; <length> ts => m
      ; ( <spx-shell-RenameVar> (x,(n,m)) => y <+ <spx-shell-HoArg> x => y )

    spx-shell-fixup-rename-calls =
      topdown(try(spx-shell-RenameCall))

    pain = !SDefT("zz",[],[],CallT(SVar("inc"),[],[])) ; spx-shell-frontend

    main = !RDefT("R",[],[],Rule(Anno(Int("0"),Wld()),Anno(Int("1"),Op("Nil",[])),Id())) ; spx-shell-frontend