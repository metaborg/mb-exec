module pretty-print
imports libstratego-gpp libstratego-lib

strategies

  options =
    ArgOption("-p"
      , (parse-pptable-file <+ ReadFromFile)
      ; <extend-config> ("-p", [<id>])
      , !"-p table     give a default parse table")
  + ArgOption("-s"
      , read-text-file
      ; explode-string
      ; <set-config> ("-s", <id>)
      , !"-s source    give the original source file")
  + ArgOption("-w"
      , <set-config> ("-w", <string-to-int>)
      , !"-w width     force the terminal size")

   get-substring =
     ?(begin, end)
   ; <get-config> "-s"
   ; drop(|begin)
   ; take(|<subt> (end, begin))
   ; implode-string

  get-table =
     <get-config> "-p"

  pp-orig =
    ?cons#([]){begin, end}
  ; <get-substring> (begin, end)
  ; ![<id>]

  pp-orig = id
  ; where(get-annotations => l)
  ; ?_#(<id>)
  ; !(l, <id>)
  ; rec x({a: id
    ; ?([a], [])
    ; ![<get-substring> a]}
   <+ {a,b,c,d: id
    ; ?([a|b], [c|d])
    ; <x> (b, d)
    ; <concat> [[<get-substring> a], <pp> c, <id>]})

  get-width =
    <get-config> "-w" <+ !80

  pp-gpp-1 =
    ![<is-string>]

  pp-gpp-1 =
    ![<is-real; real-to-string>]

  pp-gpp-1 =
    ![<is-int; int-to-string>]

  pp-gpp-2 =
    not(is-list)
  ; not(?Some(_))
  ; not(?None())
  ; not(?alt(_,_))
  ; ?f#(args)
  ; where(<length> args => arity)
  ; <pptable-get-log(|<get-table>)> (arity, [f]) => (_, template)
  ; ![f] => currentpath
  ; let narg2abox(|n) = my-arg2abox(|<get-table>, n, currentpath)
     in <nmap(narg2abox | 1)> args => aboxes
    end
  ; <gpp-instantiate(|aboxes)> template

  my-arg2abox(|tbl, n, path) =
      ?arg
    ; ![n | path] => new_path
    ; ( <hashtable-get(|new_path)> tbl => (full_path, template)
        ; <my-symbol2abox(|tbl, <pptable-path-get-symbol> full_path,
                           new_path, template)> arg
      <+ !H([SOpt(HS(), "0")], <pp> arg)
      )

  my-symbol2abox(|tbl, symbol, path, template) =
       ?alt(_, _)
       ; my-symbol2abox-alt(|tbl, path, template)
    <+ (?Some(_) + None())
       ; my-symbol2abox-opt(|tbl, path, template)
    <+ where(!symbol; (?"iter" + ?"iter-star"))
       ; my-symbol2abox-iter(|tbl, path, template)
    <+ where(!symbol; (?"iter-sep" + ?"iter-star-sep"))
       ; my-symbol2abox-iter-sep(|tbl, path, template)
    <+ where(!symbol => "seq")
       ; my-symbol2abox-seq(|tbl, path, template)

  my-symbol2abox-alt(|tbl, path, template) =
    ?alt(n, [])
    ; <gpp-instantiate(|[])> [<index(|n)> template]

  my-symbol2abox-alt(|tbl, path, template) =
    ?alt(n, [arg])
    ; <my-arg2abox(|tbl, n, path)> arg => abox
    ; <gpp-instantiate(|[abox])> [<index(|n)> template]

  my-symbol2abox-opt(|tbl, path, template) =
    ?Some(<id>)
    ; my-arg2abox(|tbl, 1, path) => abox
    ; <gpp-instantiate(|[abox])> template

  my-symbol2abox-opt(|tbl, path, template) =
    ?None(); ![]

  my-symbol2abox-iter(|tbl, path, template) =
      map(my-arg2abox(|tbl, 1, path)) => abox
    ; <gpp-instantiate(| [abox])> template

  my-symbol2abox-iter-sep(|tbl, path, template) =
    map(my-arg2abox(|tbl, 1, path))
    ; if <collect-om(?S(_), conc)> template => [_] then
        rec x(
           \ []     -> []  \
        <+ \ [e]    -> [e] \
        <+ \ [e | xs] -> [e, e| <x> xs] \
        )
      end
    ; gpp-instantiate-sep-list(|template)

  my-symbol2abox-seq(|tbl, path, template) =
    TupleToList
    ; nzip( \ (n, t) -> <my-arg2abox(|tbl, n, path)> t \ ) => abox
    ; <gpp-instantiate(|abox)> template

  pp-gpp =
     pp-gpp-1
  <+ pp-gpp-2

  pp =
    pp-orig <+ pp-gpp

  trm2abox = trm2abox(|<get-config> "-p")

   pretty-print =
     input-wrap(output-option + options,
       where(<get-config> "-p"
           ; pptable-make-hashtable
           ; <set-config> ("-p", <id>))
     ; rec x(alltd(?amb([<id>|_]); x))
     ; !H([SOpt(HS(), "0")], <pp>)
     ; alltd(S(id) <+ SOpt(id, id) <+ !S(<is-string>))
     ; box2text-string(|<get-width>)
     ; where(
         if <get-config> "-o" => out then
           <fopen> (out, "w")
         else
           stdout-stream
         end => stream)
     ; !(<id>, stream)
     ; fputs
     ; fclose
     )
