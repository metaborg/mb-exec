Specification(
  [ Signature(
      [ Constructors(
          [ OpDecl("Nil", ConstType(Sort("List", [SortVar("a")])))
          , OpDecl("Nil", ConstType(Sort("List", [SortVar("a")])))
          ]
        )
      ]
    )
  , Strategies(
      [ SDefT(
          "a_0"
        , []
        , []
        , Build(Anno(Str("is-not-num-test"), Op("Nil", [])))
        )
      , SDefT(
          "c_0"
        , []
        , []
        , GuardedLChoice(CallT(SVar("is_num_0_0"), [], []), Fail, Id)
        )
      , SDefT(
          "d_0"
        , []
        , []
        , Build(Anno(Int("130"), Op("Nil", [])))
        )
      , SDefT(
          "e_0"
        , []
        , []
        , Build(Anno(Int("130"), Op("Nil", [])))
        )
      , SDefT(
          "is_not_num_test_0_0"
        , []
        , []
        , CallT(
            SVar("apply_test_4_0")
          , [ CallT(SVar("a_0"), [], [])
            , CallT(SVar("c_0"), [], [])
            , CallT(SVar("d_0"), [], [])
            , CallT(SVar("e_0"), [], [])
            ]
          , []
          )
        )
      , ExtSDef("is_alphanum_0_0", [], [])
      , SDefT(
          "f_0"
        , []
        , []
        , Build(Anno(Str("is-alphanum-test"), Op("Nil", [])))
        )
      , SDefT(
          "g_0"
        , []
        , []
        , Build(Anno(Int("50"), Op("Nil", [])))
        )
      , SDefT(
          "h_0"
        , []
        , []
        , Build(Anno(Int("50"), Op("Nil", [])))
        )
      , SDefT(
          "is_alphanum_test_0_0"
        , []
        , []
        , CallT(
            SVar("apply_test_4_0")
          , [ CallT(SVar("f_0"), [], [])
            , CallT(SVar("is_alphanum_0_0"), [], [])
            , CallT(SVar("g_0"), [], [])
            , CallT(SVar("h_0"), [], [])
            ]
          , []
          )
        )
      , ExtSDef("is_num_0_0", [], [])
      , ExtSDef(
          "apply_test_4_0"
        , [ VarDec(
              "v_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          , VarDec(
              "w_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          , VarDec(
              "x_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          , VarDec(
              "y_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          ]
        , []
        )
      , SDefT(
          "j_0"
        , []
        , []
        , Build(Anno(Str("is-num-test"), Op("Nil", [])))
        )
      , SDefT(
          "k_0"
        , []
        , []
        , Build(Anno(Int("50"), Op("Nil", [])))
        )
      , SDefT(
          "l_0"
        , []
        , []
        , Build(Anno(Int("50"), Op("Nil", [])))
        )
      , SDefT(
          "is_num_test_0_0"
        , []
        , []
        , CallT(
            SVar("apply_test_4_0")
          , [ CallT(SVar("j_0"), [], [])
            , CallT(SVar("is_num_0_0"), [], [])
            , CallT(SVar("k_0"), [], [])
            , CallT(SVar("l_0"), [], [])
            ]
          , []
          )
        )
      , ExtSDef(
          "test_suite_2_0"
        , [ VarDec(
              "t_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          , VarDec(
              "u_137"
            , FunType(
                [ConstType(Sort("ATerm", []))]
              , ConstType(Sort("ATerm", []))
              )
            )
          ]
        , []
        )
      , SDefT(
          "m_0"
        , []
        , []
        , Build(Anno(Str("char-test"), Op("Nil", [])))
        )
      , SDefT(
          "n_0"
        , []
        , []
        , Seq(
            CallT(SVar("is_num_test_0_0"), [], [])
          , Seq(
              CallT(SVar("is_alphanum_test_0_0"), [], [])
            , CallT(SVar("is_not_num_test_0_0"), [], [])
            )
          )
        )
      , SDefT(
          "main_0_0"
        , []
        , []
        , CallT(
            SVar("test_suite_2_0")
          , [ CallT(SVar("m_0"), [], [])
            , CallT(SVar("n_0"), [], [])
            ]
          , []
          )
        )
      ]
    )
  ]
)
