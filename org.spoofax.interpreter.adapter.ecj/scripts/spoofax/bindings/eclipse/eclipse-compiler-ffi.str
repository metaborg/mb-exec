/**
 * Foreign function interface to the Eclipse Compiler for Java.
 *
 * Licensed under the GNU Lesser General Public License, v2.1
 *
 * @author Karl Trygve Kalleberg <karltk@ii.uib.no>
 */

module spoofax/bindings/eclipse/eclipse-compiler-ffi
imports
  stratego-lib
  spoofax/bindings/eclipse/EclipseJava

signature
  constructors
  FILE : Term -> FILE
  
  Project        : Term -> Project
  Binding        : Int * Int * String -> Binding
  TypeBinding    : List(String) * String * List(TypeBinding) * TypeBinding * List(TypeBinding) * Int * ITypeBinding -> TypeBinding
  TypeParameter  : List(String) -> TypeParameter
  DottedName     : String -> DottedName
  IType          : DottedName * Int * IType * DottedName * List(DottedName) * List(TypeParameter) -> IType
  ITypeHierarchy : IType * List(IType) -> ITypeHierarchy
  PrimitiveName  : String -> Name
  
strategies

  /** @type FILE -> ASTNode */
  ecj-parse-only = ?FILE(name) ; prim("ECJ_parse_only", name)

  /** @type String -> ECJProject */
  ecj-open-project = ?path ; prim("ECJ_open_project", path)
  
  ecj-create-project = ?path ; prim("ECJ_create_project", path)

  ecj-add-source-folder(|project) = ?path ; prim("ECJ_add_source_folder", project, path)
  
  ecj-add-jar(|project) = ?path ; prim("ECJ_add_jar", path, project)
    
  ecj-parse-and-resolve(|project) = ?FILE(name) ; prim("ECJ_parse_and_resolve", project, name) 
  
  ecj-is-valid-ast-node = 
       (?t ; prim("ECJ_is_valid_ast_node", t))
    <+ (?t ; prim("ECJ_is_valid_ast_nodelist", t))
    <+ is-string
    <+ is-int
  
  /** @type Name -> TypeBinding */
  ecj-binding-of =
     ecj-is-Name
   ; ?name
   ; prim("ECJ_binding_of_name", name)
   
  /** @type Name -> TypeBinding */
  ecj-binding-of = 
     ecj-is-TypeDeclaration
   ; ?type
   ; prim("ECJ_type_of_typedecl", type) // FIXME ECJ_binding_of_typedecl

  /** @type Type -> TypeBinding */
  ecj-binding-of =
      ecj-is-Type
    ; ?expr
    ; prim("ECJ_type_of_type", expr) // FIXME ECJ_binding_of_type

  /** @type Name -> TypeBinding */
  ecj-binding-of =
     ?TypeDeclarationStatement(_)
   ; ?stmt
   ; prim("ECJ_type_of_typedeclstmt", stmt)
  
  /** @type Name -> TypeBinding */
  ecj-binding-of =
     ?TypeParameter(_,_)
   ; ?param
   ; prim("ECJ_type_of_typeparameter", param)

  /** @type Name -> TypeBinding */
  ecj-binding-of =
      ecj-is-Expression
    ; ?expr
    ; prim("ECJ_type_of_expr", expr)


strategies

  /**
   * @param target - TypeBinding
   * @type TypeBinding -> TypeBinding 
   */
  ecj-is-cast-compatible(|target) =
     ?source
   ; prim("ECJ_is_cast_compatible", target, source)

  /**
   * @param target - TypeBinding
   * @type TypeBinding -> TypeBinding 
   */
  ecj-is-subtype-compatible(|target) =
     ?source
   ; prim("ECJ_is_subtype_compatible", target, source)

    
strategies

  /** @type MethodInvocation -> MethodBinding */
  ecj-method-of =
      ?MethodInvocation(_, _, _, _)
    ; ?meth
    ; prim("ECJ_method_of_methodinvoc", meth)

  /** @type SuperMethodInvocation -> MethodBinding */
  ecj-method-of =
      ?SuperMethodInvocation(_, _, _, _)
    ; ?meth
    ; prim("ECJ_method_of_supermethodinvoc", meth)

  /** @type SuperConstructorInvocation -> MethodBinding */
  ecj-method-of =
      ?SuperConstructorInvocation(_, _, _)
    ; ?meth
    ; prim("ECJ_method_of_superctorinvoc", meth)
    
strategies

  ecj-is-TypeDeclaration = 
      ?AnnotationTypeDeclaration(_, _, _, _)
    + ?EnumDeclaration(_, _, _, _, _, _)
    + ?TypeDeclaration(_, _, _, _, _, _ ,_,_)
      
  ecj-is-IType = ?"IType"#(_)
  
  ecj-is-Type = 
      ?ArrayType(_, _, _)
    + ?ParameterizedType(_, _)
    + ?PrimitiveType(_)
    + ?QualifiedType(_, _)
    + ?SimpleType(_)
    + ?WildcardType(_)

  ecj-is-Name =
      ?SimpleName(_)
    + ?QualifiedName(_, _)
    + ?PrimitiveName(_)
   
  ecj-is-Expression =
      ?MarkerAnnotation(_)
    + ?NormalAnnotation(_,_)
    + ?SingleMemberAnnotation(_,_)
    + ?ArrayAccess(_, _)
    + ?ArrayCreation(_, _, _)
    + ?ArrayInitializer(_)
    + ?Assignment(_, _, _)
    + ?BooleanLiteral(_)
    + ?CastExpression(_, _)
    + ?CharacterLiteral(_)
    + ?ClassInstanceCreation(_, _, _, _)
    + ?ConditionalExpression(_, _, _)
    + ?FieldAccess(_, _)
    + ?InfixExpression(_, _, _, _)
    + ?InstanceofExpression(_, _)
    + ?MethodInvocation(_, _, _, _)
    + ?QualifiedName(_, _)
    + ?SimpleName(_)
    + ?NullLiteral()
    + ?NumberLiteral(_)
    + ?ParenthesizedExpression(_)
    + ?PostfixExpression(_, _)
    + ?StringLiteral(_)
    + ?SuperFieldAccess(_, _)
    + ?SuperMethodInvocation(_, _, _, _)
    + ?ThisExpression(_)
    + ?TypeLiteral(_)
    + ?VariableDeclarationExpression(_, _, _)     

  ecj-is-CompilationUnit = ?CompilationUnit(_, _, _)

  ecj-is-DottedName = ?DottedName(_)
  
  ecj-is-MethodDeclaration = ?MethodDeclaration(_, _, _, _, _, _, _, _)

  ecj-is-FieldDeclaration = ?FieldDeclaration(_, _, _, _)

  ecj-is-SimpleName = ?SimpleName(_)    
  
  ecj-is-Javadoc = ?Javadoc(_)
  
  ecj-is-TypeBinding = ?TypeBinding(_, _, _, _, _, _, _)
  
strategies

  /** @type Term -> ECJProject */
  ecj-current-project =
      prim("ECJ_current_project")

  /** @type Term -> ECJJavaProject */
  ecj-current-java-project =
      prim("ECJ_current_java_project")

  /** @type DottedName -> IType */
  ecj-search-for-type(|scope) = 
      DottedName(?typename)
    ; prim("ECJ_search_for_type", scope, typename)      

  /** @param scope - IJavaElement
    * @type DottedName -> List(IType) 
    */
  ecj-search-for-supertype-type-refs(|scope) = 
      DottedName(?typename)
    ; prim("ECJ_search_for_supertype_type_refs", scope, typename)      

  /** @param scope - IType
    * @type DottedName -> List(IType) 
    */
  ecj-search-for-supertype-type-refs-in-hierarchy(|scope) = 
      DottedName(?typename)
    ; prim("ECJ_search_for_supertype_type_refs_in_hierarchy", scope, typename)      

  /** 
   * Check compilation units with the given type name for the presence of a type
   * with the given name. This is a shallow check.
   * @param project : IProject
   * @type DottedName -> IType 
   *
   * @see ecj-search-project-for-type-deep
   */
  ecj-search-project-for-type(|project) = 
      DottedName(?typename)
    ; prim("ECJ_search_project_for_type", project, typename, 0)      

  /** 
   * Check all compilation units for the given type name, also those with different
   * names than the type name. This takes longer than a shallow check.
   *
   * @param project : IProject
   * @type DottedName -> IType
   */
  ecj-search-project-for-type-deep(|project) = 
      DottedName(?typename)
    ; prim("ECJ_search_project_for_type", project, typename, 1)      

  /** @type IType -> ITypeHierarchy */
  ecj-hierarchy-for-type = 
    ?type
    ; prim("ECJ_hierarchy_for_type", type)
    
  /** @type IType -> ICompilationUnit */    
  ecj-icompilation-unit-for-type =
    ?type
    ; prim("ECJ_icompilation_unit_for_type", type)

  /** @type IType -> CompilationUnit */    
  ecj-unbacked-compilation-unit-for-type =
    ?type
    ; prim("ECJ_unbacked_compilation_unit_for_type", type)

  /** @type ICompilationUnit -> CompilationUnit */   
  ecj-ast-for-compilation-unit =
    ?cu
    ; prim("ECJ_ast_for_compilation_unit", cu, 0)

  /** @type ICompilationUnit -> CompilationUnit */
  ecj-typed-ast-for-compilation-unit =
    ?cu
    ; prim("ECJ_ast_for_compilation_unit", cu, 1)

  /** @type CompilationUnit -> CompilationUnit */
  ecj-rewrite-compilation-unit(s) = 
    ?cu
    ; prim("ECJ_rewrite_compilation_unit", s | cu)

  /** @type IFile -> IFile */
  ecj-rewrite-file(s) = 
    ?cu
    ; prim("ECJ_rewrite_file", s | cu)
    
strategies

  /** 
   * Compute the fully qualified, dotted name as a string.
   *
   * @type SimpleName -> String
   */
  ecj-as-dotted-string = ?SimpleName(<id>)

  /** @type QualifiedName -> String */
  ecj-as-dotted-string = 
      ?QualifiedName(<ecj-as-dotted-string>, SimpleName(n)) => rest
    ; <concat-strings> [rest, ".", n]

  /** @type PrimitiveName -> String */
  ecj-as-dotted-string = ?PrimitiveName(<id>)
  
  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?TypeDeclaration(_, _, <id>, _, _, _, _, _)   

  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?SimpleType(<id>)

  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?MethodDeclaration(_, _, _, _, <id>, _, _, _)

  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?VariableDeclarationFragment(<id>, _, _)

  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?ArrayType(_, _, <ecj-name-of>)
  
  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?PackageDeclaration(_, _, <id>)

  /** @type _ -> SimpleName / QualifiedName */
  ecj-name-of = ?SingleVariableDeclaration(_, _, <id>, _, _)
  
  /** @type -> PrimitiveName */
  ecj-name-of = ?PrimitiveType(<id>) ; !PrimitiveName(<id>)
  
  /**
   * Computes the dotted name of an AST node, if this is possible
   * 
   * @type ASTNode -> DottedName
   */
  ecj-dotted-name-of = !DottedName(<ecj-name-of ; ecj-as-dotted-string>)
   
  /** @type ASTNode -> DottedName */
  ecj-dotted-name-of = ?TypeBinding(_, <!DottedName(<id>)>, _, _, _, _, _)

  /** @type ASTNode -> DottedName */
  ecj-dotted-name-of = ?IType(<id>, _, _, _, _, _)
  
  /** @type PrimitiveType -> DottedName  */
  ecj-dotted-name-of = ?PrimitiveType(x); !DottedName(x)
  
  /** @type */    
  ecj-package-of = ?CompilationUnit(<id>, _, _)
  
  /** @type CompilationUnit -> List(TypeDeclaration) */    
  ecj-types-of = ?CompilationUnit(_, _, <id>)
  
  /** @type CompilationUnit -> List(ImportDeclaration) */    
  ecj-imports-of = ?CompilationUnit(_, <id>, _)

  /** 
   * Obtain the fully qualified name of a type. The AST must have been
   * constructed with full type information.
   *
   * @type Type -> Name 
   */
  ecj-qualified-name-of = 
      ecj-binding-of 
    ; ecj-dotted-name-of 
    ; ecj-as-qualified-name
  
strategies
  
  /**
   * Obtain the project-relative path for a compilation unit.
   *
   * @type CompilationUnit -> String
   */
  ecj-project-path-of = ?node ; prim("ECJ_path_of_compilationunit", node)
  
  /**
   * @param IProject - project
   * @type Tuple(IProject, String) -> IFile 
   */
  ecj-project-get-file(|project) =
      ?filename
    ; prim("ECJ_project_get_file", project, filename)

  /**
   * @type IFile -> IFile 
   */
  ecj-file-exists =
      ?file
    ; prim("ECJ_file_exists", file)

  
  /** @type SimpleName -> SimpleName */
  ecj-simplename-of = ?SimpleName(_)

  /** @type QualifiedName -> SimpleName */
  ecj-simplename-of = ?QualifiedName(_, <ecj-simplename-of>)
  
  /** @type DottedName -> SimpleName */
  ecj-simplename-of = ?DottedName(<id>) ; string-tokenize(|['.']) ; last ; !SimpleName(<id>)
  
  /** @type DottedName -> SimpleName */
  ecj-simplename-of = is-string ; string-tokenize(|['.']) ; last ; !SimpleName(<id>)
  
  /** @type ASTNode -> SimpleName */
  ecj-simplename-of = ecj-name-of ; ecj-simplename-of

  /** @type Name -> String */
  ecj-simplename-of-as-string = ?PrimitiveType(<id>) <+ ecj-simplename-of ; ?SimpleName(<id>)
    
  /** @type DottedName -> Name */
  ecj-as-qualified-name =  ?DottedName(<ecj-as-qualified-name>)

  /** @type String -> Name */      
  ecj-as-qualified-name =
      is-string
    ; string-tokenize(|['.'])
    ; let f = \ (el, tl) -> QualifiedName(tl, SimpleName(el)) \
          g = \ (el, 0) -> SimpleName(el) \
      in 
        <foldl(g <+ f)> (<id>, 0)
      end
    ; not(is-int)

  /**
   * Returns true iff the supplied Type is a primitive type
   * @type ASTNode -> PrimitiveType
   */
  ecj-is-primitive-type = ?PrimitiveType(_)

  /** @type ASTNode -> PrimitiveType */
  ecj-is-PrimitiveType = ?PrimitiveType(_)

  /** @type ASTNode -> ParameterizedType */
  ecj-is-ParameterizedType = ?ParameterizedType(_, _)

  /** @type ASTNode -> ASTNode */
  ecj-is-valid-ast = 
    bottomup(
      ecj-is-valid-ast-node 
      <+ where(<debug> ("Not an ECJ appl: ", <id>)))
  
  /** @type MethodDeclaration -> MethodDeclaration */
  ecj-is-constructor =
    ?MethodDeclaration(_, _, None(), _, _, _ ,_ ,_)
        
  /** 
   * @type MethodDeclaration -> MethodDeclaration
   */
  ecj-is-static = 
    where(?MethodDeclaration(_, <not(filter(?Modifier(ModifierKeyword(8))) => [])>, _, _, _, _, _, _))

  /** 
   * @type MethodDeclaration -> MethodDeclaration
   */
  ecj-is-public = 
    where(?MethodDeclaration(_, <not(filter(?Modifier(ModifierKeyword(1))) => [])>, _, _, _, _, _, _))

  /** @type TypeBinding -> TypeBinding */
  ecj-is-binding-for-primitive = 
    ?tb
    ; prim("ECJ_is_binding_primitive_type", tb)
    
  /**
   * Create a new file containing an ugly printed string of the given
   * AST node. First member of the tuple is the project relative path.
   * Second argument is the AST node to print. Result is the project
   * relative path.
   *
   * @type Tuple(String,ASTNode) -> String
   */
  ecj-create-compilation-unit-buffer =
      ?(filename, typedecl) 
    ; where(<ecj-is-valid-ast> typedecl)
    ; prim("ECJ_create_compilation_unit_buffer", filename, typedecl)

  /**
   * Creates a given dotted package name in the currently active project, in
   * inside the given base path.
   *
   * @type Tuple(String, String) -> ()
   */
  ecj-create-package =
      ?(basepath, packagename)
    ; prim("ECJ_create_package", basepath, packagename)
    ; !()

  /** 
   * Compute all named types implemented by superclasses and interfaces of this
   * this. This set is all superclasses, and all interfaces, transitively,
   * but not the type itself.
   *
   * @type TypeBinding -> List(DottedName)
   */
  ecj-all-supertypes-of = 
      ?TypeBinding(_,_,_,superclass, superifaces,_,_)
    ; <collect-all(?TypeBinding(_,<id>,_,_,_,_,_))> [ superclass | superifaces ]
    ; map(!DottedName(<id>))
  
  /** 
   * Compute all named types implemented by the type of this typebinding.
   * This is the type itself, all superclasses, and all interfaces, 
   * transitively.
   *
   * @type TypeBinding -> List(DottedName)
   */
  ecj-all-types-of = 
      collect-all(\ TypeBinding(_,x,_,_,_,_,_) -> x \)
    ; map(!DottedName(<id>))

strategies

  /**
   * @type ASTNode -> String
   */
  ecj-string-name-of = ecj-dotted-name-of ; ?DottedName(<id>)
  
overlays

  PublicMod    = Modifier(ModifierKeyword(1))
  PrivateMod   = Modifier(ModifierKeyword(2))
  ProtectedMod = Modifier(ModifierKeyword(4))
  StaticMod    = Modifier(ModifierKeyword(8))
  FinalMod     = Modifier(ModifierKeyword(16))
  TransientMod = Modifier(ModifierKeyword(128))
  
  