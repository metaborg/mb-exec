CompilationUnit(
  PackageDeclaration(None(), [], QualifiedName(SimpleName("inf101"), SimpleName("regning")))
, []
, [ TypeDeclaration(
      Javadoc([TagElement(None(), [TextElement("Posisjoner p?? et uendelig stort ruteark. Vi kan regne med posisjoner, * grensesnitt <code>IRegnearter</code>, og sammenligne dem, grensesnitt * <code>Comparable</code>. *  * @author Magne, 2008-02-01 * @since Forelesningen tirsdag 2008-01-29 *  ")])])
    , [Modifier(ModifierKeyword(1))]
    , SimpleName("Posisjon")
    , []
    , None()
    , [ SimpleType(
          QualifiedName(QualifiedName(SimpleName("inf101"), SimpleName("basis")), SimpleName("IBasis"))
        )
      , ParameterizedType(SimpleType(SimpleName("IRegnearter")), [SimpleType(SimpleName("Posisjon"))])
      , ParameterizedType(SimpleType(SimpleName("Comparable")), [SimpleType(SimpleName("Posisjon"))])
      ]
    , [ MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Et sv??rt lite testprogram. Bruker bare generiske tester for add, mul, sub\t * og zero. Disse testene skal gjelde for alle klasser som implementerer<code>IRegnearter</code>.\t * \t * @param args\t *            brukes ikke\t ")])])
        , [Modifier(ModifierKeyword(1)), Modifier(ModifierKeyword(8))]
        , PrimitiveType("void")
        , []
        , SimpleName("main")
        , [ SingleVariableDeclaration(
              []
            , ArrayType(SimpleType(SimpleName("String")), 1, SimpleType(SimpleName("String")))
            , SimpleName("args")
            , 0
            , None()
            )
          ]
        , []
        , Block(
            [ VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("a")
                  , 0
                  , ClassInstanceCreation(
                      None()
                    , SimpleType(SimpleName("Posisjon"))
                    , None()
                    , [NumberLiteral("2"), NumberLiteral("8")]
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("b")
                  , 0
                  , ClassInstanceCreation(
                      None()
                    , SimpleType(SimpleName("Posisjon"))
                    , None()
                    , [NumberLiteral("28"), PrefixExpression(PrefixExpressionOperator("-"), NumberLiteral("82"))]
                    )
                  )
                ]
              )
            , ExpressionStatement(
                MethodInvocation(
                  QualifiedName(SimpleName("System"), SimpleName("out"))
                , SimpleName("println")
                , []
                , [ InfixExpression(
                      "+"
                    , StringLiteral("OK=")
                    , MethodInvocation(
                        MethodInvocation(
                          SimpleName("a")
                        , SimpleName("add")
                        , []
                        , [SimpleName("b")]
                        )
                      , SimpleName("equals")
                      , []
                      , [MethodInvocation(
                           SimpleName("b")
                         , SimpleName("add")
                         , []
                         , [SimpleName("a")]
                         )]
                      )
                    )
                  ]
                )
              )
            , ExpressionStatement(
                MethodInvocation(
                  QualifiedName(SimpleName("System"), SimpleName("out"))
                , SimpleName("println")
                , []
                , [ InfixExpression(
                      "+"
                    , StringLiteral("OK=")
                    , MethodInvocation(
                        MethodInvocation(
                          SimpleName("a")
                        , SimpleName("mul")
                        , []
                        , [SimpleName("b")]
                        )
                      , SimpleName("equals")
                      , []
                      , [MethodInvocation(
                           SimpleName("b")
                         , SimpleName("mul")
                         , []
                         , [SimpleName("a")]
                         )]
                      )
                    )
                  ]
                )
              )
            , ExpressionStatement(
                MethodInvocation(
                  QualifiedName(SimpleName("System"), SimpleName("out"))
                , SimpleName("println")
                , []
                , [ InfixExpression(
                      "+"
                    , StringLiteral("OK=")
                    , MethodInvocation(
                        MethodInvocation(
                          SimpleName("a")
                        , SimpleName("sub")
                        , []
                        , [SimpleName("a")]
                        )
                      , SimpleName("equals")
                      , []
                      , [MethodInvocation(SimpleName("a"), SimpleName("zero"), [], [])]
                      )
                    )
                  ]
                )
              )
            ]
          )
        )
      , FieldDeclaration(
          Javadoc([TagElement(None(), [TextElement("Posisjon langs x-aksen.\t ")])])
        , []
        , PrimitiveType("int")
        , [VariableDeclarationFragment(SimpleName("x"), 0, None())]
        )
      , FieldDeclaration(
          Javadoc([TagElement(None(), [TextElement("Posisjon langs y-aksen.\t ")])])
        , []
        , PrimitiveType("int")
        , [VariableDeclarationFragment(SimpleName("y"), 0, None())]
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Origo - posisjon (0,0).\t ")])])
        , [Modifier(ModifierKeyword(1))]
        , None()
        , []
        , SimpleName("Posisjon")
        , []
        , []
        , Block(
            [ SuperConstructorInvocation(None(), [], [])
            , ExpressionStatement(Assignment(SimpleName("x"), NumberLiteral("0")))
            , ExpressionStatement(Assignment(SimpleName("y"), NumberLiteral("0")))
            ]
          )
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Setter en posisjon ut fra de oppgitte parametrene.\t * \t * @param x\t *            x-posisjonen\t * @param y\t *            y-posisjonen\t ")])])
        , [Modifier(ModifierKeyword(1))]
        , None()
        , []
        , SimpleName("Posisjon")
        , [ SingleVariableDeclaration([], PrimitiveType("int"), SimpleName("x"), 0, None())
          , SingleVariableDeclaration([], PrimitiveType("int"), SimpleName("y"), 0, None())
          ]
        , []
        , Block(
            [ SuperConstructorInvocation(None(), [], [])
            , ExpressionStatement(
                Assignment(FieldAccess(ThisExpression(None()), SimpleName("x")), SimpleName("x"))
              )
            , ExpressionStatement(
                Assignment(FieldAccess(ThisExpression(None()), SimpleName("y")), SimpleName("y"))
              )
            ]
          )
        )
      , MethodDeclaration(
          None()
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , SimpleType(SimpleName("Posisjon"))
        , []
        , SimpleName("add")
        , [SingleVariableDeclaration(
             []
           , SimpleType(SimpleName("Posisjon"))
           , SimpleName("b")
           , 0
           , None()
           )]
        , []
        , Block(
            [ VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyX")
                  , 0
                  , InfixExpression(
                      "+"
                    , SimpleName("x")
                    , QualifiedName(SimpleName("b"), SimpleName("x"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyY")
                  , 0
                  , InfixExpression(
                      "+"
                    , SimpleName("y")
                    , QualifiedName(SimpleName("b"), SimpleName("y"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("nyP")
                  , 0
                  , ClassInstanceCreation(
                      None()
                    , SimpleType(SimpleName("Posisjon"))
                    , None()
                    , [SimpleName("nyX"), SimpleName("nyY")]
                    )
                  )
                ]
              )
            , ReturnStatement(SimpleName("nyP"))
            ]
          )
        )
      , MethodDeclaration(
          None()
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , PrimitiveType("int")
        , []
        , SimpleName("compareTo")
        , [SingleVariableDeclaration(
             []
           , SimpleType(SimpleName("Posisjon"))
           , SimpleName("arg0")
           , 0
           , None()
           )]
        , []
        , Block(
            [ IfStatement(
                InfixExpression(
                  "!="
                , SimpleName("x")
                , QualifiedName(SimpleName("arg0"), SimpleName("x"))
                )
              , Block(
                  [ ReturnStatement(
                      InfixExpression(
                        "-"
                      , SimpleName("x")
                      , QualifiedName(SimpleName("arg0"), SimpleName("x"))
                      )
                    )
                  ]
                )
              , None()
              )
            , ReturnStatement(
                InfixExpression(
                  "-"
                , SimpleName("y")
                , QualifiedName(SimpleName("arg0"), SimpleName("y"))
                )
              )
            ]
          )
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Alltid sann: alle posisjoner er tillatt.\t * \t * @see inf101.basis.IBasis#datainvariant()\t ")])])
        , [Modifier(ModifierKeyword(1))]
        , PrimitiveType("boolean")
        , []
        , SimpleName("datainvariant")
        , []
        , []
        , Block([ReturnStatement(BooleanLiteral(1))])
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("To posisjoner er like om b??de x- og y-verdiene til posisjonene er like.\t * Denne algoritmen kan genereres direkte av eclipse.\t * \t * @see java.lang.Object#equals(java.lang.Object)\t ")])])
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , PrimitiveType("boolean")
        , []
        , SimpleName("equals")
        , [SingleVariableDeclaration(
             []
           , SimpleType(SimpleName("Object"))
           , SimpleName("obj")
           , 0
           , None()
           )]
        , []
        , Block(
            [ IfStatement(
                InfixExpression("==", ThisExpression(None()), SimpleName("obj"))
              , Block([ReturnStatement(BooleanLiteral(1))])
              , None()
              )
            , IfStatement(
                InfixExpression("==", SimpleName("obj"), NullLiteral())
              , Block([ReturnStatement(BooleanLiteral(0))])
              , None()
              )
            , IfStatement(
                InfixExpression(
                  "!="
                , MethodInvocation(None(), SimpleName("getClass"), [], [])
                , MethodInvocation(SimpleName("obj"), SimpleName("getClass"), [], [])
                )
              , Block([ReturnStatement(BooleanLiteral(0))])
              , None()
              )
            , VariableDeclarationStatement(
                [Modifier(ModifierKeyword(16))]
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("other")
                  , 0
                  , CastExpression(SimpleType(SimpleName("Posisjon")), SimpleName("obj"))
                  )
                ]
              )
            , IfStatement(
                InfixExpression(
                  "!="
                , SimpleName("x")
                , QualifiedName(SimpleName("other"), SimpleName("x"))
                )
              , Block([ReturnStatement(BooleanLiteral(0))])
              , None()
              )
            , IfStatement(
                InfixExpression(
                  "!="
                , SimpleName("y")
                , QualifiedName(SimpleName("other"), SimpleName("y"))
                )
              , Block([ReturnStatement(BooleanLiteral(0))])
              , None()
              )
            , ReturnStatement(BooleanLiteral(1))
            ]
          )
        )
      , MethodDeclaration(
          None()
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , PrimitiveType("int")
        , []
        , SimpleName("hashCode")
        , []
        , []
        , Block(
            [ VariableDeclarationStatement(
                [Modifier(ModifierKeyword(16))]
              , PrimitiveType("int")
              , [VariableDeclarationFragment(SimpleName("prime"), 0, NumberLiteral("31"))]
              )
            , VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [VariableDeclarationFragment(SimpleName("result"), 0, NumberLiteral("1"))]
              )
            , ExpressionStatement(
                Assignment(
                  SimpleName("result")
                , InfixExpression(
                    "+"
                  , InfixExpression("*", SimpleName("prime"), SimpleName("result"))
                  , SimpleName("x")
                  )
                )
              )
            , ExpressionStatement(
                Assignment(
                  SimpleName("result")
                , InfixExpression(
                    "+"
                  , InfixExpression("*", SimpleName("prime"), SimpleName("result"))
                  , SimpleName("y")
                  )
                )
              )
            , ReturnStatement(SimpleName("result"))
            ]
          )
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Multiplikasjon av to posisjoner skjer komponentvis.\t * \t * @see inf101.regning.IRegnearter#mul(java.lang.Object)\t ")])])
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , SimpleType(SimpleName("Posisjon"))
        , []
        , SimpleName("mul")
        , [SingleVariableDeclaration(
             []
           , SimpleType(SimpleName("Posisjon"))
           , SimpleName("b")
           , 0
           , None()
           )]
        , []
        , Block(
            [ VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyX")
                  , 0
                  , InfixExpression(
                      "*"
                    , SimpleName("x")
                    , QualifiedName(SimpleName("b"), SimpleName("x"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyY")
                  , 0
                  , InfixExpression(
                      "*"
                    , SimpleName("y")
                    , QualifiedName(SimpleName("b"), SimpleName("y"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("nyP")
                  , 0
                  , ClassInstanceCreation(
                      None()
                    , SimpleType(SimpleName("Posisjon"))
                    , None()
                    , [SimpleName("nyX"), SimpleName("nyY")]
                    )
                  )
                ]
              )
            , ReturnStatement(SimpleName("nyP"))
            ]
          )
        )
      , MethodDeclaration(
          None()
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , SimpleType(SimpleName("Posisjon"))
        , []
        , SimpleName("sub")
        , [SingleVariableDeclaration(
             []
           , SimpleType(SimpleName("Posisjon"))
           , SimpleName("b")
           , 0
           , None()
           )]
        , []
        , Block(
            [ VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyX")
                  , 0
                  , InfixExpression(
                      "-"
                    , SimpleName("x")
                    , QualifiedName(SimpleName("b"), SimpleName("x"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , PrimitiveType("int")
              , [ VariableDeclarationFragment(
                    SimpleName("nyY")
                  , 0
                  , InfixExpression(
                      "-"
                    , SimpleName("y")
                    , QualifiedName(SimpleName("b"), SimpleName("y"))
                    )
                  )
                ]
              )
            , VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("Posisjon"))
              , [ VariableDeclarationFragment(
                    SimpleName("nyP")
                  , 0
                  , ClassInstanceCreation(
                      None()
                    , SimpleType(SimpleName("Posisjon"))
                    , None()
                    , [SimpleName("nyX"), SimpleName("nyY")]
                    )
                  )
                ]
              )
            , ReturnStatement(SimpleName("nyP"))
            ]
          )
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Utskriftsformatet er (x,y), direkte fra verdiene til komponentene.\t * \t * @see java.lang.Object#toString()\t ")])])
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , SimpleType(SimpleName("String"))
        , []
        , SimpleName("toString")
        , []
        , []
        , Block(
            [ VariableDeclarationStatement(
                []
              , SimpleType(SimpleName("String"))
              , [ VariableDeclarationFragment(
                    SimpleName("res")
                  , 0
                  , InfixExpression("+", StringLiteral("("), SimpleName("x"))
                  )
                ]
              )
            , ReturnStatement(SimpleName("res"))
            ]
          )
        )
      , MethodDeclaration(
          Javadoc([TagElement(None(), [TextElement("Returnerer origo (0,0), r??rer ikke argumentet.\t * \t * @see inf101.regning.IRegnearter#zero()\t ")])])
        , [MarkerAnnotation(SimpleName("Override")), Modifier(ModifierKeyword(1))]
        , SimpleType(SimpleName("Posisjon"))
        , []
        , SimpleName("zero")
        , []
        , []
        , Block(
            [ReturnStatement(ClassInstanceCreation(None(), SimpleType(SimpleName("Posisjon")), None(), []))]
          )
        )
      ]
    )
  ]
)
